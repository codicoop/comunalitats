# Generated by Django 3.2.4 on 2021-11-09 15:06
from django.conf import settings
from django.contrib.auth.management import create_permissions
from django.db import migrations


def add_group_permissions(apps, schema_editor):
    print("")
    # Forcing the creation of the base permissions. When running migrations
    # in an empty database the permissions are not created until the first
    # migration process finishes and (apparently) it cannot be solves by
    # just setting the dependencies order.
    dependant_app_names = [
        # Project apps:
        "coopolis",
        "cc_courses",
        "dataexports",
        "facilities_reservations",
        # External libraries:
        "mailing_manager",
        "mailqueue",
        "admin",
    ]
    for name in dependant_app_names:
        populate_system_permissions(apps, name)

    # To force the creation of the initial permissions for Constance the
    # previous method doesn't work. It includes its own method to do that:
    # https://github.com/jazzband/django-constance/blob/master/constance/apps.py
    # but this is meant to be called at the post_migrate signal and I didn't
    # find a way to call it from within the migration.
    # Creating the permissions manually:
    populate_constance_permissions(apps)

    group_model = apps.get_model('auth', 'Group')
    permission_model = apps.get_model('auth', 'Permission')

    # Administradors
    permissions = {
        "constance": [
            "change_config", "view_config",
        ],
        "mailing_manager": [
            "view_mail",
        ],
        "mailqueue": [
            "view_attachment",
            "view_mailermessage",
        ],
        "auth": [
            "add_permission",
        ],
        "dataexports": [
            "change_subsidyperiod", "add_subsidyperiod",
        ],
        "cc_courses": [
            "add_courseplace",
            "add_entity",
        ],
        "coopolis": [
            "delete_tagulous_user_tags",
        ],
    }

    group, created = group_model.objects.get_or_create(
        name="Responsable de backoffice"
    )
    group.permissions.set(get_permissions(permission_model, permissions))
    group.save()
    if created:
        print('Grup Administradors creat.')
    else:
        print('Grup Administradors ja existent, permisos actualitzats.')

    # Equip
    permissions = {
        "coopolis": [
            "view_town",
            "view_activitypoll",
            "view_user", "change_user", "add_user",
            "add_tagulous_user_tags", "change_tagulous_user_tags", "view_tagulous_user_tags",
        ],
        "cc_courses": [
            "view_courseplace", "change_courseplace",
            "view_entity", "change_entity",
            "view_organizer", "change_organizer",
            "view_course", "change_course", "add_course",
            "view_activity", "change_activity", "add_activity",
            "view_activityresourcefile", "change_activityresourcefile",
            "add_activityresourcefile", "delete_activityresourcefile",
            "view_activityenrolled", "change_activityenrolled",
            "add_activityenrolled", "delete_activityenrolled",
        ],
        "dataexports": [
            "view_subsidyperiod",
            "view_dataexports",
        ],
        "facilities_reservations": [
            "view_room", "add_room", "change_room",
            "view_reservation", "add_reservation", "change_reservation", "delete_reservation",
        ],
        "admin": [
            "view_logentry",
        ],
        "auth": [
            "view_group",
        ],
    }
    group, created = group_model.objects.get_or_create(
        name="Equip"
    )
    group.permissions.set(get_permissions(permission_model, permissions))
    group.save()
    if created:
        print("Grup Equip creat.")
    else:
        print('Grup Equip ja existent, permisos actualitzats.')


def populate_system_permissions(apps, app_name):
    app_config = apps.get_app_config(app_name)
    app_config.models_module = True
    create_permissions(app_config, verbosity=0)
    app_config.models_module = None


def populate_constance_permissions(apps):
    contenttype_model = apps.get_model("contenttypes", "ContentType")
    permission_model = apps.get_model('auth', 'Permission')
    content_type, created = contenttype_model.objects.get_or_create(
        app_label='constance',
        model='config',
    )

    permission_model.objects.get_or_create(
        content_type=content_type,
        codename='change_config',
        defaults={'name': 'Can change config'},
    )
    permission_model.objects.get_or_create(
        content_type=content_type,
        codename='view_config',
        defaults={'name': 'Can view config'},
    )


def get_permissions(permission_model, permissions_dict: dict):
    permissions = []
    for content_type__app_label, codenames in permissions_dict.items():
        permissions += permission_model.objects.filter(
            content_type__app_label=content_type__app_label,
            codename__in=codenames)
    return permissions


class Migration(migrations.Migration):

    dependencies = [
        ('coopolis', '0004_data_superuser'),
        ('dataexports', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_group_permissions),
    ]
