# Generated by Django 3.2.14 on 2024-08-02 07:08

from django.db import migrations


def migrate_service_project_stage_2024(apps, schema_editor):
    stage_model = apps.get_model("projects", "ProjectStage")
    convocatoria_model = apps.get_model("dataexports", "SubsidyPeriod")
    try:
        convocatoria_2024 = convocatoria_model.objects.get(
            date_start__year=2024,
            date_end__year=2025,
        )
    except convocatoria_model.DoesNotExist:
        print("Els Serveis no s'han pogut migrar als de 2024 degut a que la "
              "convocatòria 2024-2025 no existeix.")
        return
    stages = stage_model.objects.filter(
        subsidy_period=convocatoria_2024,
        service__isnull=False,
    )
    for stage in stages:
        if 10 <= stage.service <= 50:
            service_2024 = get_equivalent_service(stage.service)
            print(f"ProjectStage {stage.project.name} has {stage.service}, "
                  f"replacing it with {service_2024}")
            stage.service = service_2024
            # If the service is not valid for the convocatòria, the sub service
            # will not be either, but we cannot deduce the new subservice
            # because they completely changed in number and order.
            stage.sub_service = None
            stage.save()
        else:
            print(f"ProjectStage of {stage.project.name} has {stage.service}. "
                  f"Nothing to replace.")


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0006_auto_20240719_1559'),
    ]

    operations = [
        migrations.RunPython(migrate_service_project_stage_2024),
    ]


def get_equivalent_service(service):
    """
    In ServicesChoices, the options A to E are the old ones and the ones from
    F to K the new ones.
    The old service "A" value is 10, and the corresponding new service "A" is
    60, and the same relation goes for each of them.
    """
    return service + 50
